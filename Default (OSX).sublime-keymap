[
  // insert "'$selection'" with default snippet

  {
    "keys": ["'"],
    "command": "insert_snippet",
    "args": {
      "contents": "'${0:$SELECTION}'"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
    ]
  },

  // insert "'$selection'"

  {
    "keys": ["'"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "'${0:$selection}'"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // other langs, in function arguments: insert "'$selection', "

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${0:$selection}',"
          },
        }
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*[,\\]})]", "match_all": true},
      {"key": "following_128_chars_end", "operator": "not_regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // ruby, go, last line of function arguments: insert "'$selection', "

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${0:$selection}',"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|go)"},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // in "[" nesting: insert "'$selection', "

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${0:$selection}',"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([`'\"]|$)", "match_all": true},
      {"key": "nesting", "operator": "equal", "operand": "[", "match_all": true},
    ]
  },

  // after ":" if expression continues: insert "'$selection', "

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${0:$selection}', "
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^([^\\s,\\]\\)\\}]|\\s*\n)", "match_all": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": ":\\s*$", "match_all": true},
    ]
  },

  // javascript, same line of nesting: insert "'$selection': $0"

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}': $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*:", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby, php, same line of nesting, at nesting end or nesting middle: insert "'$selection' => $0"

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "right_delete",
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}' => $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript, same line of nesting: insert "'$selection': $0,"

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}': $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[^},:]", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?\\s*:", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, same line of nesting, at middle of nesting: insert "'$selection' => $0,"

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}' => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([^},=])", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?\\s*(=>|:)", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript: insert "'$selection': $0, " on new line of nesting

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}': $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, new line of nesting: insert "'$selection' => $0, "

  {
    "keys": ["'"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "replace_text_by_regexp",
          "args": {
            "regexp": "^:\\s*,",
            "replacement": "",
            "key": "following_end",
          },
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:\\s*,", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "'${1:$selection}' => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // move on next quote if in string

  {
    "keys": ["'"],
    "command": "move",
    "args": {"by": "characters", "forward": true},
    "context":
    [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "string"},
    ]
  },

  // remove double quotes

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "'$", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^'", "match_all": true},
      {"key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true},
      {"key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // insert "\"$selection\"" with default snippet

  {
    "keys": ["\""],
    "command": "insert_snippet",
    "args": {
      "contents": "\"${0:$SELECTION}\""
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
    ]
  },

  // insert "\"$selection\""

  {
    "keys": ["\""],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "\"${0:$selection}\""
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // other langs, in function arguments: insert "\"$selection\", "

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${0:$selection}\","
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*[,\\]})]", "match_all": true},
      {"key": "following_128_chars_end", "operator": "not_regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // ruby, go, last line of function arguments: insert "\"$selection\","

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${0:$selection}\","
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|go)"},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // // in "[" nesting: insert "\"$selection\","

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${0:$selection}\","
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([`'\"]|$)", "match_all": true},
      {"key": "nesting", "operator": "equal", "operand": "[", "match_all": true},
    ]
  },

  // after ":" if expression continues: insert "\"$selection\","

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${0:$selection}\","
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^([^\\s,\\]\\)\\}]|\\s*\n)", "match_all": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": ":\\s*$", "match_all": true},
    ]
  },

  // javascript, same line of nesting: insert "\"$selection\": $0"

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\": $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*:", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby, php, same line of nesting, at nesting end or nesting middle: insert "'$selection' => $0"

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "right_delete",
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\" => $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript, same line of nesting: insert "\"$selection\": $0,"

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\": $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[^},:]", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, same line of nesting: insert "\"$selection' => $0, "


  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\" => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([^},=])", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?\\s*(=>|:)", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript: insert "\"$selection\": $0, " on new line of nesting

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\": $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, new line of nesting: insert "\"$selection' => $0, "

  {
    "keys": ["\""],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "replace_text_by_regexp",
          "args": {
            "regexp": "^:\\s*,",
            "replacement": "",
            "key": "following_end",
          },
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:\\s*,", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "\"${1:$selection}\" => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // move on next quote if in string

  {
    "keys": ["\""],
    "command": "move",
    "args": {"by": "characters", "forward": true},
    "context":
    [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "string"},
    ]
  },

  // remove double quotes

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "\"$", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^\"", "match_all": true},
      {"key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true},
      {"key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // insert "`$selection`" with default snippet

  {
    "keys": ["`"],
    "command": "insert_snippet",
    "args": {
      "contents": "`${0:$SELECTION}`"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
    ]
  },

  // insert "`$selection`"

  {
    "keys": ["`"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "`${0:$selection}`"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // other langs, in function arguments: insert "`$selection`, "

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${0:$selection}`,"
          },
        }
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*[,\\]})]", "match_all": true},
      {"key": "following_128_chars_end", "operator": "not_regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // ruby, go, last line of function arguments: insert "`$selection`, "

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${0:$selection}`,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|go)"},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^\\s*\n\\s*\\)", "match_all": true},
      {"key": "in_arguments", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // in "[" nesting: insert "`$selection`, "

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${0:$selection}`,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([`'\"]|$)", "match_all": true},
      {"key": "nesting", "operator": "equal", "operand": "[", "match_all": true},
    ]
  },

  // after ":" if expression continues: insert "`$selection`, "

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${0:$selection}`, "
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_128_chars_end", "operator": "regex_contains", "operand": "^([^\\s,\\]\\)\\}]|\\s*\n)", "match_all": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": ":\\s*$", "match_all": true},
    ]
  },

  // javascript, same line of nesting: insert "`$selection`: $0"

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}`: $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "not_regex_contains", "operand": "^\\s*:", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby, php, same line of nesting, at nesting end or nesting middle: insert "`$selection` => $0"

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "right_delete",
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}` => $0"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript, same line of nesting: insert "`$selection`: $0,"

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}`: $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[^},:]", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?\\s*:", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, same line of nesting, at middle of nesting: insert "`$selection` => $0,"

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}` => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[{,]\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*([^},=])", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?\\s*(=>|:)", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // javascript: insert "`$selection`: $0, " on new line of nesting

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}`: $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.js"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // ruby or php, new line of nesting: insert "`$selection` => $0, "

  {
    "keys": ["`"],
    "command": "run_commands",
    "args": {
      "commands": [
        {
          "command": "replace_text_by_regexp",
          "args": {
            "regexp": "^:\\s*,",
            "replacement": "",
            "key": "following_end",
          },
          "context": [
            {"key": "following_text_end", "operator": "regex_contains", "operand": "^:\\s*,", "match_all": true},
          ],
        },
        {
          "command": "ensure_spaces_around",
        },
        {
          "command": "insert_snippet_enhanced",
          "args": {
            "contents": "`${1:$selection}` => $0,"
          },
        },
      ],
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\n\\s*$", "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source\\.(ruby|php)"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // move on next quote if in string

  {
    "keys": ["`"],
    "command": "move",
    "args": {"by": "characters", "forward": true},
    "context":
    [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "scope", "operator": "regex_contains", "operand": "string"},
    ]
  },

  // remove double quotes

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true},
      {"key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true},
      {"key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.other.backticks", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
    ]
  },

  // selection count: insert {$selection}

  {
    "keys": ["("],
    "command": "insert_snippet",
    "args": {"contents": "(${0:$SELECTION})"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "not_equal", "operand": 1},
    ]
  },

  // wrap non empty selection

  {
    "keys": ["("],
    "command": "insert_snippet",
    "args": {"contents": "(${0:$SELECTION})"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },


  // wrap one-line block: insert {$selection}

  {
    "keys": ["("],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "(${0:$selection})"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap several-lines block: insert ${indented_selection}

  {
    "keys": ["("],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "(${0:\n$indented_selection\n})"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap next statement

  {
    "keys": ["("],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/select_statement_and_insert_parenthesis.sublime-macro"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^[\\w\\(\\{\\[$]"},
    ]
  },

  // remove nesting closer

  {
    "keys": [")"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/remove_nesting_tail_and_insert_closing_parenthesis.sublime-macro"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source(?!.*(string|comment|yaml|css))"},
      {"key": "nesting", "operator": "equal", "operand": "("},
    ]
  },

  // wrap one-line block and go back to

  {
    "keys": [")"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0($selection)"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },

  // wrap several-lines block and go back to

  {
    "keys": [")"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0(\n$indented_selection\n)",
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
    ]
  },

  // move right on same nesting

  {
    "keys": [")"],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true,
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\)", "match_all": true},
    ]
  },

  // remove nesting

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "\\($", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^\\)", "match_all": true}
    ]
  },

  // selection count: insert {$selection}

  {
    "keys": ["["],
    "command": "insert_snippet",
    "args": {"contents": "[${0:$SELECTION}]"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "not_equal", "operand": 1},
    ]
  },

  // wrap non empty selection

  {
    "keys": ["["],
    "command": "insert_snippet",
    "args": {"contents": "[${0:$SELECTION}]"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },

  // wrap one-line block: insert {$selection}

  {
    "keys": ["["],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "[${0:$selection}]"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap several-lines block: insert ${indented_selection}

  {
    "keys": ["["],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "[${0:\n$indented_selection\n}]"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap next statement

  {
    "keys": ["["],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/select_statement_and_insert_brackets.sublime-macro"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^[\\w\\(\\{\\[$]"},
    ]
  },

  // remove nesting closer

  {
    "keys": ["]"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/remove_nesting_tail_and_insert_closing_bracket.sublime-macro"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source(?!.*(string|comment|yaml|css))"},
      {"key": "nesting", "operator": "equal", "operand": "["},
    ]
  },

  // wrap one-line block and go back to

  {
    "keys": ["]"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0[$selection]"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },

  // wrap several-lines block and go back to

  {
    "keys": ["]"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0[\n$indented_selection\n]",
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
    ]
  },

  // move right on same nesting

  {
    "keys": ["]"],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true,
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^]", "match_all": true},
    ]
  },

  // remove nesting

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "\\[$", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^\\]", "match_all": true}
    ]
  },

  // selection count: insert {$selection}

  {
    "keys": ["{"],
    "command": "insert_snippet",
    "args": {"contents": "{${0:$SELECTION}}"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "not_equal", "operand": 1},
    ]
  },

  // wrap non empty selection

  {
    "keys": ["{"],
    "command": "insert_snippet",
    "args": {"contents": "{${0:$SELECTION}}"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },

  // wrap one-line block: insert {$selection}

  {
    "keys": ["{"],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "{${0:$selection}}"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap several-lines block: insert ${indented_selection}

  {
    "keys": ["{"],
    "command": "insert_snippet_enhanced",
    "args": {"contents": "{${0:\n$indented_selection\n}}"},
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "num_selections", "operator": "equal", "operand": 1},
    ]
  },

  // wrap next statement

  {
    "keys": ["{"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/select_statement_and_insert_braces.sublime-macro"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^[\\w\\(\\{\\[$]"},
    ]
  },

  // remove nesting closer

  {
    "keys": ["}"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/TheNestingSnippet/macro/remove_nesting_tail_and_insert_closing_brace.sublime-macro"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": true},
      {"key": "scope", "operator": "regex_contains", "operand": "source(?!.*(string|comment|yaml|css))"},
      {"key": "nesting", "operator": "equal", "operand": "{"},
    ]
  },

  // wrap one-line block and go back to

  {
    "keys": ["}"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0{$selection}"
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
    ]
  },

  // wrap several-lines block and go back to

  {
    "keys": ["}"],
    "command": "insert_snippet_enhanced",
    "args": {
      "contents": "$0{\n$indented_selection\n}",
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "num_selections", "operator": "equal", "operand": 1},
      {"key": "selection_empty", "operator": "equal", "operand": false},
      {"key": "selection", "operator": "not_regex_contains", "operand": "^(\\([\\S\\s]*\\)|\\{[\\S\\s]*\\}|\\[[\\S\\s]*\\])$"},
      {"key": "selection", "operator": "regex_contains", "operand": "\n"},
    ]
  },

  // move right on same nesting

  {
    "keys": ["}"],
    "command": "move",
    "args": {
      "by": "characters",
      "forward": true,
    },

    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "following_text_end", "operator": "regex_contains", "operand": "^}", "match_all": true},
    ]
  },

  // remove nesting

  {
    "keys": ["backspace"],
    "command": "run_macro_file",
    "args": {
      "file": "res://Packages/Default/Delete Left Right.sublime-macro"
    },
    "context": [
      {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
      {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "\\{$", "match_all": true},
      {"key": "following_text", "operator": "regex_contains", "operand": "^\\}", "match_all": true}
    ]
  },

  // {
  //   "keys": [","],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": ", $1: $0"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "following_text", "operator": "regex_contains", "operand": "^\\s*[\\},]", "match_all": true},
  //     {"key": "nesting", "operator": "equal", "operand": "{", "match_all": true},
  //   ]
  // },

  // // insert ": $0," in nesting

  // {
  //   "keys": [":"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": ": $0, "
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "[{,]\\s*\\w+$", "match_all": true},
  //     {"key": "following_text", "operator": "not_regex_contains", "operand": "^\\s*[\\},]", "match_all": true},
  //     {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*[`'\"]?\\w+[`'\"]?:", "match_all": true},
  //     {"key": "nesting", "operator": "regex_contains", "operand": "[\\(\\{]", "match_all": true},
  //   ]
  // },

  // {
  //   "keys": ["enter"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": "\n$1: $0,"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
  //     {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "(,|[=(]\\s*{)\\s*$", "match_all": true},
  //     {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true},
  //     {"key": "nesting", "operator": "equal", "operand": "{", "match_all": true},
  //   ]
  // },

  // {
  //   "keys": ["enter"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": "\n$0,"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
  //     {"key": "preceding_128_chars_begin", "operator": "regex_contains", "operand": "(,|[=(]\\s*{)\\s*$", "match_all": true},
  //     {"key": "following_text_end", "operator": "regex_contains", "operand": "^\\s*$", "match_all": true},
  //     {"key": "nesting", "operator": "regex_contains", "operand": "[([]", "match_all": true},
  //   ]
  // },

  // {
  //   "keys": ["ctrl+enter"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": ",\n$1: $0"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
  //     {"key": "following_text_end", "operator": "regex_contains", "operand": "^,$", "match_all": true},
  //     {"key": "nesting", "operator": "equal", "operand": "{", "match_all": true},
  //   ]
  // },

  // {
  //   "keys": ["ctrl+enter"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": ",\n$0"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "selection_empty", "operator": "equal", "operand": true, "match_all": true},
  //     {"key": "following_text_end", "operator": "regex_contains", "operand": "^,$", "match_all": true},
  //     {"key": "nesting", "operator": "regex_contains", "operand": "[([]", "match_all": true},
  //   ]
  // },

  // {
  //   "keys": ["/"],
  //   "command": "insert_snippet",
  //   "args": {
  //     "contents": " => $0"
  //   },
  //   "context": [
  //     {"key": "setting.sublime_enhanced_keybindings", "operator": "equal", "operand": true},
  //     {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|comment|css|yaml|jsx))", "match_all": true},
  //     {"key": "preceding_text_begin", "operator": "regex_contains", "operand": "[`'\"]\\s*$", "match_all": true},
  //     {"key": "nesting", "operator": "regex_contains", "operand": "[([{]", "match_all": true},
  //   ]
  // },

]